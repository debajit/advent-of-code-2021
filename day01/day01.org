#+TITLE:Day 1: Sonar Sweep

https://adventofcode.com/2021/day/1

* Part 1

** Problem

Count the number of times a depth measurement increases from the previous measurement. (There is no measurement before the first measurement.) In the example above, the changes are as follows:

#+begin_src text
199 (N/A - no previous measurement)
200 (increased)
208 (increased)
210 (increased)
200 (decreased)
207 (increased)
240 (increased)
269 (increased)
260 (decreased)
263 (increased)
#+end_src

In this example, there are 7 measurements that are larger than the previous measurement.

*How many measurements are larger than the previous measurement?*


** Solutions

*** C++

#+begin_src C++ :includes '(<vector> <numeric> <iostream> <map>) :namespaces std :flags -std=c++11 :results verbatim
  #include <iostream>
  #include <fstream>
  using namespace std;

  int increaseCount (const string& filename) {
      int increases = 0;
      ifstream file(filename);

      int previousDepth;
      file >> previousDepth;

      int depth;
      while (file >> depth) {
          cout << previousDepth << "\t" << depth << " ";

          if (depth > previousDepth) {
              ++increases;
              cout << "INCREASE";
          }

          cout << "\n";
          previousDepth = depth;
      }

      return increases;
  }

  int main() {
      cout << increaseCount("example.txt") << "\n";
  }
#+end_src

#+RESULTS:
#+begin_example
199	200 INCREASE
200	208 INCREASE
208	210 INCREASE
210	200
200	207 INCREASE
207	240 INCREASE
240	269 INCREASE
269	260
260	263 INCREASE
7
#+end_example


*** Scala

#+begin_src scala
  import scala.io.Source

  def increaseCount(filename: String) = {
    val bufferedSource = Source.fromFile(filename)

    val result =
      bufferedSource.getLines.
        map(_.toInt).
        sliding(2).
        foldLeft(0)((acc, pair) => {
          print(s"${pair(0)} ${pair(1)} ")

          if (pair(0) < pair(1)) {
            println("INCREASE")
            acc + 1
          }
          else {
            println
            acc
          }
        })

    bufferedSource.close
    result
  }

  println(increaseCount("input.txt"))
#+end_src

*** Elixir


* Part 2

** Problem

Consider sums of a three-measurement sliding window. Again considering the above example:

#+begin_src text
  199  A
  200  A B
  208  A B C
  210    B C D
  200  E   C D
  207  E F   D
  240  E F G
  269    F G H
  260      G H
  263        H
#+end_src

Your goal now is to count the *number of times the sum of measurements in this sliding window increases from the previous sum*. So, compare A with B, then compare B with C, then C with D, and so on. Stop when there aren't enough measurements left to create a new three-measurement sum.

Consider sums of a three-measurement sliding window. *How many sums are larger than the previous sum?*


** Solutions

*** Scala

#+begin_src scala
  import scala.io.Source

  def slidingWindowSumIncreaseCount (filename: String) = {
    val file = Source.fromFile(filename)

    val result =
      file.getLines.toList.
        view.
        map(_.toInt).
        sliding(3).
        map(_.sum).
        sliding(2).
        foldLeft(0)((acc, pair) => {
          if (pair(0) < pair(1))
            acc + 1
          else
            acc
        })

    file.close
    result
  }

  println(slidingWindowSumIncreaseCount("input.txt"))
#+end_src


*** C++

#+begin_src C++ :includes '(<vector> <numeric> <iostream> <map>) :namespaces std :flags -std=c++11 :results verbatim
TODO
#+end_src
